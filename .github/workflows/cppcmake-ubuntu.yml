# KEEP THE RUNNER OS AS LOW AS POSSIBLE.
# If built on the latest OS, it may not run on previous OS versions.
# Related: https://docs.appimage.org/reference/best-practices.html#binaries-compiled-on-old-enough-base-system

name: Build (Ubuntu)

on:
  workflow_call:
    inputs:
      NIGHTLY:
        default: false
        type: boolean
  workflow_dispatch:

jobs:
  build:
    name: ${{ matrix.os }} (${{ matrix.bundle }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        bundle: [SQLCipher, SQLite]
        os: [ubuntu-22.04, ubuntu-22.04-arm]
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Install and cache dependencies
        uses: awalsh128/cache-apt-pkgs-action@v1.5.3
        with:
          packages: libfuse2 libqcustomplot-dev libqscintilla2-qt5-dev libqt5svg5 ninja-build qttools5-dev
          version: ${{ matrix.os }}

      - if: matrix.bundle == 'SQLCipher'
        name: Build SQLCipher
        run: |
          # git clone https://github.com/sqlcipher/sqlcipher && cd sqlcipher && git checkout $(git describe --tags --abbrev=0)
          git clone https://github.com/sqlcipher/sqlcipher && cd sqlcipher && git checkout v4.6.1
          ./configure --enable-tempstore=yes --with-crypto-lib=openssl --enable-load-extension --disable-tcl CFLAGS="-DSQLCIPHER_CRYPTO_OPENSSL -DSQLITE_ENABLE_COLUMN_METADATA -DSQLITE_ENABLE_FTS3 -DSQLITE_ENABLE_FTS3_PARENTHESIS -DSQLITE_ENABLE_FTS5 -DSQLITE_ENABLE_GEOPOLY -DSQLITE_ENABLE_JSON1 -DSQLITE_ENABLE_MEMORY_MANAGEMENT=1 -DSQLITE_ENABLE_RTREE -DSQLITE_ENABLE_SNAPSHOT=1 -DSQLITE_ENABLE_STAT4 -DSQLITE_HAS_CODEC -DSQLITE_SOUNDEX"
          make -j2 && sudo make install -j2

      - if: matrix.bundle == 'SQLite'
        name: Build SQLite
        run: |
          TARBALL=$(curl -s https://sqlite.org/download.html | awk '/<!--/,/-->/ {print}' | grep 'sqlite-autoconf' | cut -d ',' -f 3)
          SHA3=$(curl -s https://sqlite.org/download.html | awk '/<!--/,/-->/ {print}' | grep 'sqlite-autoconf' | cut -d ',' -f 5)
          curl -LsS -o sqlite.tar.gz https://sqlite.org/${TARBALL}
          VERIFY=$(openssl dgst -sha3-256 sqlite.tar.gz | cut -d ' ' -f 2)
          if [ "$SHA3" != "$VERIFY" ]; then
            echo "::error::SQLite tarball checksum mismatch."
            exit 1
          fi
          tar -xzf sqlite.tar.gz && cd sqlite-autoconf-*

          CPPFLAGS="-DSQLITE_ENABLE_COLUMN_METADATA=1 -DSQLITE_MAX_VARIABLE_NUMBER=250000 -DSQLITE_ENABLE_RTREE=1 -DSQLITE_ENABLE_GEOPOLY=1 -DSQLITE_ENABLE_FTS3=1 -DSQLITE_ENABLE_FTS3_PARENTHESIS=1 -DSQLITE_ENABLE_FTS5=1 -DSQLITE_ENABLE_STAT4=1 -DSQLITE_ENABLE_JSON1=1 -DSQLITE_SOUNDEX=1 -DSQLITE_ENABLE_MATH_FUNCTIONS=1 -DSQLITE_MAX_ATTACHED=125 -DSQLITE_ENABLE_MEMORY_MANAGEMENT=1 -DSQLITE_ENABLE_SNAPSHOT=1" ./configure --disable-shared
          make -j2 && sudo make install -j2

      - name: Configure build
        run: |
          mkdir -v appbuild appdir && cd appbuild
          cmake -G Ninja \
                -DCMAKE_BUILD_TYPE=Release \
                -DCMAKE_INSTALL_PREFIX:PATH=../appdir/usr \
                -DENABLE_TESTING=ON \
                -DFORCE_INTERNAL_QSCINTILLA=ON \
                -Dsqlcipher=${{ matrix.bundle == 'SQLCipher' }} ..

      - name: Build
        working-directory: ./appbuild
        run: ninja install

      - name: Tests
        working-directory: ./appbuild
        run: ninja test

      - name: Build AppImage
        run: |
          wget -c -nv "https://github.com/linuxdeploy/linuxdeploy/releases/download/1-alpha-20240109-1/linuxdeploy-$(uname -m).AppImage"
          wget -c -nv "https://github.com/linuxdeploy/linuxdeploy-plugin-qt/releases/download/1-alpha-20240109-1/linuxdeploy-plugin-qt-$(uname -m).AppImage"
          chmod a+x "linuxdeploy-$(uname -m).AppImage" "linuxdeploy-plugin-qt-$(uname -m).AppImage"
          if [ "${{ inputs.NIGHTLY }}" = "true" ]; then
            export VERSION=$(date +%Y%m%d)
          else
            export VERSION=$(printf "dev-`git -C . rev-parse --short HEAD`")
          fi
          LD_LIBRARY_PATH="$LD_LIBRARY_PATH:/usr/local/lib" "./linuxdeploy-$(uname -m).AppImage" --appdir=appdir --desktop-file=appdir/usr/share/applications/sqlitebrowser.desktop --plugin qt --output appimage

      - name: Rename a file
        run: |
          for i in DB_Browser_for_SQLite*; do mv "$i" "${i//_/.}"; done
          if [ "${{ matrix.bundle }}" = "SQLCipher" ]; then
            export FILE=$(ls DB.Browser.for.SQLite*.AppImage)
            export FILE=${FILE/SQLite/SQLCipher}
            mv -v DB.Browser.for.SQLite*.AppImage $FILE
          fi

      - if: github.event_name != 'pull_request' && github.workflow != 'Build (Ubuntu)'
        name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ matrix.os }}-${{ matrix.bundle }}
          path: DB.Browser.for.*.AppImage
          retention-days: 1

      - if: github.event_name == 'workflow_dispatch' && github.workflow == 'Build (Ubuntu)'
        name: Release
        uses: softprops/action-gh-release@v2
        with:
          files: DB.Browser.for.*.AppImage
          prerelease: true
          tag_name: ${{ github.sha }}-ubuntu

      - name: Summary
        run: |
          QT_VERSION=$(qmake --version | awk '/Using Qt version/ {print $4}')
          if [ "${{ matrix.bundle }}" = "SQLCipher" ]; then
              OPENSSL_VERSION=$(openssl version | awk '{print $2}')
              SQLCIPHER_VERSION=$(/usr/local/bin/sqlcipher ":memory:" "PRAGMA cipher_version;" | awk '{print $1}')
              SQLITE_VERSION="Not applicable"
          else
              OPENSSL_VERSION="Not applicable"
              SQLCIPHER_VERSION="Not applicable"
              SQLITE_VERSION=$(/usr/local/bin/sqlite3 --version | awk '{print $1}')
          fi

          echo "## Libaries used" >> $GITHUB_STEP_SUMMARY
          echo "OpenSSL: $OPENSSL_VERSION, Qt: $QT_VERSION, SQLCipher: $SQLCIPHER_VERSION, SQLite: $SQLITE_VERSION" >> $GITHUB_STEP_SUMMARY
